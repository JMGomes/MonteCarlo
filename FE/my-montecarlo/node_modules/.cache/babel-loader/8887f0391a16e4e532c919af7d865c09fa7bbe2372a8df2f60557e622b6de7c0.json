{"ast":null,"code":"import { getPoints } from \"../api/requests/getPoints\";\nconst MAX_BATCH_VALUE = 1000000;\nexport const monteCarlo = async n => {\n  let pointsProcessedInside = 0;\n  let pointsProcessedTotal = 0;\n  while (pointsProcessedTotal !== n) {\n    // divide by batches\n    let pointsRemaining = n - pointsProcessedTotal;\n    let pointsToProcess = Math.min(pointsRemaining, MAX_BATCH_VALUE);\n    console.log(`Processing ${pointsToProcess} points. Points already processed: ${pointsProcessedTotal}/${n}`);\n    console.log(`Current PI is ${calculatePi(pointsProcessedInside, pointsProcessedTotal)}`);\n    const points = await getPoints(pointsToProcess);\n    for (let i = 0; i < points.length; i++) {\n      let p = points[i];\n      if (Math.pow(p.x, 2) + Math.pow(p.y, 2) < 1) {\n        pointsProcessedInside++;\n      }\n      pointsProcessedTotal++;\n    }\n  }\n  return {\n    piCalculated: calculatePi(pointsProcessedInside, pointsProcessedTotal),\n    pointsGenerated: pointsProcessedTotal,\n    pointsInside: pointsProcessedInside\n  };\n};\nconst calculatePi = (pointsInside, pointsTotal) => {\n  return 4 * pointsInside / pointsTotal;\n};","map":{"version":3,"names":["getPoints","MAX_BATCH_VALUE","monteCarlo","n","pointsProcessedInside","pointsProcessedTotal","pointsRemaining","pointsToProcess","Math","min","console","log","calculatePi","points","i","length","p","pow","x","y","piCalculated","pointsGenerated","pointsInside","pointsTotal"],"sources":["/Users/joaoo/Desktop/MonteCarlo/FE/my-monte-carlo/src/service/MonteCarloService.ts"],"sourcesContent":["import {getPoints} from \"../api/requests/getPoints\";\nimport {Point} from \"../model/Point\";\n\nconst MAX_BATCH_VALUE = 1000000;\n\nexport interface MonteCarloResult {\n  piCalculated: number;\n  pointsGenerated: number;\n  pointsInside: number;\n}\n\nexport const monteCarlo = async (n: number): Promise<MonteCarloResult> => {\n  let pointsProcessedInside = 0;\n  let pointsProcessedTotal = 0;\n\n  while (pointsProcessedTotal !== n) {\n    // divide by batches\n    let pointsRemaining = n - pointsProcessedTotal;\n    let pointsToProcess = Math.min(pointsRemaining, MAX_BATCH_VALUE);\n    console.log(`Processing ${pointsToProcess} points. Points already processed: ${pointsProcessedTotal}/${n}`);\n    console.log(`Current PI is ${calculatePi(pointsProcessedInside, pointsProcessedTotal)}`);\n    const points: Point[] = await getPoints(pointsToProcess);\n\n    for (let i = 0; i < points.length; i++) {\n      let p = points[i];\n      if (Math.pow(p.x, 2) + Math.pow(p.y, 2) < 1) {\n        pointsProcessedInside++;\n      }\n      pointsProcessedTotal++;\n    }\n  }\n  return {\n    piCalculated: calculatePi(pointsProcessedInside, pointsProcessedTotal),\n    pointsGenerated: pointsProcessedTotal,\n    pointsInside: pointsProcessedInside\n  }\n}\n\n\nconst calculatePi = (pointsInside: number, pointsTotal: number) => {\n  return 4 * pointsInside / pointsTotal;\n}"],"mappings":"AAAA,SAAQA,SAAS,QAAO,2BAA2B;AAGnD,MAAMC,eAAe,GAAG,OAAO;AAQ/B,OAAO,MAAMC,UAAU,GAAG,MAAOC,CAAS,IAAgC;EACxE,IAAIC,qBAAqB,GAAG,CAAC;EAC7B,IAAIC,oBAAoB,GAAG,CAAC;EAE5B,OAAOA,oBAAoB,KAAKF,CAAC,EAAE;IACjC;IACA,IAAIG,eAAe,GAAGH,CAAC,GAAGE,oBAAoB;IAC9C,IAAIE,eAAe,GAAGC,IAAI,CAACC,GAAG,CAACH,eAAe,EAAEL,eAAe,CAAC;IAChES,OAAO,CAACC,GAAG,CAAE,cAAaJ,eAAgB,sCAAqCF,oBAAqB,IAAGF,CAAE,EAAC,CAAC;IAC3GO,OAAO,CAACC,GAAG,CAAE,iBAAgBC,WAAW,CAACR,qBAAqB,EAAEC,oBAAoB,CAAE,EAAC,CAAC;IACxF,MAAMQ,MAAe,GAAG,MAAMb,SAAS,CAACO,eAAe,CAAC;IAExD,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAIE,CAAC,GAAGH,MAAM,CAACC,CAAC,CAAC;MACjB,IAAIN,IAAI,CAACS,GAAG,CAACD,CAAC,CAACE,CAAC,EAAE,CAAC,CAAC,GAAGV,IAAI,CAACS,GAAG,CAACD,CAAC,CAACG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE;QAC3Cf,qBAAqB,EAAE;MACzB;MACAC,oBAAoB,EAAE;IACxB;EACF;EACA,OAAO;IACLe,YAAY,EAAER,WAAW,CAACR,qBAAqB,EAAEC,oBAAoB,CAAC;IACtEgB,eAAe,EAAEhB,oBAAoB;IACrCiB,YAAY,EAAElB;EAChB,CAAC;AACH,CAAC;AAGD,MAAMQ,WAAW,GAAG,CAACU,YAAoB,EAAEC,WAAmB,KAAK;EACjE,OAAO,CAAC,GAAGD,YAAY,GAAGC,WAAW;AACvC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}