{"ast":null,"code":"import { getPoints } from \"../api/requests/getPoints\";\nexport const monteCarlo = async n => {\n  let pointsInside = 0;\n  let pointsTotal = 0;\n  const points = await getPoints(n);\n  for (let i = 0; i < points.length; i++) {\n    let p = points[i];\n    if (Math.pow(p.x, 2) + Math.pow(p.y, 2) < 1) {\n      pointsInside++;\n    }\n    pointsTotal++;\n  }\n  return calculatePi(pointsInside, pointsTotal);\n};\nconst calculatePi = (pointsInside, pointsTotal) => {\n  return 4 * pointsInside / pointsTotal;\n};","map":{"version":3,"names":["getPoints","monteCarlo","n","pointsInside","pointsTotal","points","i","length","p","Math","pow","x","y","calculatePi"],"sources":["/Users/joaoo/Desktop/my-monte-carlo/src/service/MonteCarloService.ts"],"sourcesContent":["import {getPoints} from \"../api/requests/getPoints\";\nimport {Point} from \"../model/Point\";\n\nexport const monteCarlo = async (n: number): Promise<number> => {\n  let pointsInside = 0;\n  let pointsTotal = 0;\n\n  \n  const points: Point[] = await getPoints(n);\n\n  for (let i = 0; i < points.length; i++) {\n    let p = points[i];\n    if (Math.pow(p.x, 2) + Math.pow(p.y, 2) < 1) {\n      pointsInside++;\n    }\n    pointsTotal++;\n  }\n  return calculatePi(pointsInside, pointsTotal);\n}\n\n\nconst calculatePi = (pointsInside: number, pointsTotal: number) => {\n  return 4 * pointsInside / pointsTotal;\n}"],"mappings":"AAAA,SAAQA,SAAS,QAAO,2BAA2B;AAGnD,OAAO,MAAMC,UAAU,GAAG,MAAOC,CAAS,IAAsB;EAC9D,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,WAAW,GAAG,CAAC;EAGnB,MAAMC,MAAe,GAAG,MAAML,SAAS,CAACE,CAAC,CAAC;EAE1C,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAIE,CAAC,GAAGH,MAAM,CAACC,CAAC,CAAC;IACjB,IAAIG,IAAI,CAACC,GAAG,CAACF,CAAC,CAACG,CAAC,EAAE,CAAC,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACF,CAAC,CAACI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE;MAC3CT,YAAY,EAAE;IAChB;IACAC,WAAW,EAAE;EACf;EACA,OAAOS,WAAW,CAACV,YAAY,EAAEC,WAAW,CAAC;AAC/C,CAAC;AAGD,MAAMS,WAAW,GAAG,CAACV,YAAoB,EAAEC,WAAmB,KAAK;EACjE,OAAO,CAAC,GAAGD,YAAY,GAAGC,WAAW;AACvC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}